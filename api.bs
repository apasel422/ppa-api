<pre class=metadata>
Title: Privacy-Preserving Attribution: Level 1
Shortname: Attribution
Repository: private-attribution/api
URL: https://private-attribution.github.io/api/
Editor: Martin Thomson, w3cid 68503, Mozilla https://mozilla.org/, mt@mozilla.com
Editor: Andy Leiserson, w3cid 147715, Mozilla https://mozilla.org/, aleiserson@mozilla.com
Abstract: This specifies a browser API for the measurement of advertising performance.  The goal is to produce aggregate statistics about how advertising leads to conversions, without creating a risk to the privacy of individual web users.  This API collates information about people from multiple web origins, which could be a significant risk to their privacy.  To manage this risk, the information that is gathered is aggregated using an aggregation service that is chosen by websites and trusted to perform aggregation within strict limits.  Noise is added to the aggregates produced by this service to provide differential privacy.
Status Text: This specification is a proposal that is intended to be migrated to the W3C standards track. It is not a standard.
Text Macro: LICENSE <a href=http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document>W3C Software and Document License</a>
Complain About: accidental-2119 yes, missing-example-ids yes
Markup Shorthands: markdown yes, css no, dfn yes
Assume Explicit For: yes
Group: patcg
Status: CG-DRAFT
Level: None
</pre>


# Introduction # {#intro}

This document defines a simple API for browsers
that enables the collection of aggregated, differentially-private metrics.

The primary goal of this API is to enable attribution for advertising.


## Background ## {#background}

From the early days of the Web,
advertising has been widely used to financially support the creation of sites.

One characteristic that distinguished the Web from other venues for advertising
was the ability to obtain information about the effectiveness of advertising campaigns.

Web advertisers were able to measure key metrics like reach (how many people saw an ad),
frequency (how often each person saw an ad),
and conversions (how many people saw the ad then later took the action that the ad was supposed to motivate).
In comparison, these measurements were far more timely and accurate than for any other medium.

The cost of measurement performance was privacy.
In order to produce accurate and comprehensive information,
advertising businesses performed extensive tracking of the activity of all Web users.
Each browser was given a tracking identifier,
often using cookies that were lodged by cross-site content.
Every action of interest was logged against this identifier,
forming a comprehensive record of a person's online activities.

Having a detailed record of a person's actions allowed advertisers to infer characteristics about people.
Those characteristics made it easier to choose the right audience for advertising,
greatly improving its effectiveness.
This created a strong incentive to gather more information.

Online advertising is intensely competitive.
Sites that show advertising seek to obtain the most money for each ad placement.
Advertisers seek to place advertising where it will have the most effect relative to its cost.
Any competitive edge gained by these entities--
and the intermediaries that operate on their behalf--
depends on having more comprehensive information about a potential audience.

Over time, actions of interest expanded to include nearly every aspects of online activity.
Methods were devised to correlate that information with activity outside of the Web.
An energetic trade has formed,
with multiple purveyors of personal information that is traded for various purposes.


## Goals ## {#goals}

The goal of this document is to define an means of performing attribution
that does not enable tracking.

The primary challenge with attribution is in maintaining privacy.
Attribution involves connecting activity on different sites.
If that information were directly revealed,
it would enable unwanted
[[PRIVACY-PRINCIPLES#dfn-cross-context-recognition cross-context recognition]],
thereby enabling tracking.

This document avoids cross context recognition by ensuring that
attribution information is aggregated using an [=aggregation service=].
The aggregation service is trusted to compute an aggregate
without revealing the values that each person contributes to that aggregate.

Strict limits are placed on the amount of information that each browser instance
contributes to the aggregates for a given site.
Differential privacy is used to provide additional privacy protection for each contribution.

Details of aggregation service operation is included in [[#aggregation]].
The differential privacy design used is outlined in [[#dp]].


## End-User Benefit ## {#user-benefit}

New additions to the


## Attribution Using Histograms ## {#histograms}

TODO explain why we use histograms

* Compatibility with privacy-preserving aggregation systems
* Flexibility to assign buckets

* As histogram size increases, noise becomes a problem


# Overview of Operation # {#overview}

The private attribution API provides aggregate information about the
association between two classes of events: [=impressions=] and [=conversions=].

An <dfn>impression</dfn> is the
event to which [=conversion=]s are being attributed. Selection of impression
events is left to the consumer of the API. Examples include:

*   Displaying an advertisement to a user.
*   Viewing a particular web page.

A <dfn>conversion</dfn> is the
event being attributed to [=impression=]s. Selection of conversion events
is again left to the consumer of the API. Examples include:

*   Signing up for an account.
*   Making a purchase.
*   Visiting a webpage.

When an [=impression=] occurs, information about the impression is saved by the
browser. This includes an identifier for the impression
and some metadata about the impression, such as whether the impression was an
ad view or an ad click.

At [=conversion=] time, information for aggregation is created based on the
impressions that were previously stored.  A site can request that the browser
select impressions based on a simple query.

*   If there was no matching impression,
    or the [=privacy budget=] for the site is exhausted,
    a histogram consisting entirely of zeros (0) is constructed.

*   If a matching impression is found,
    the specified value is added to a histogram
    at the bucket that was specified at the time of the impression.
    All other buckets are set to zero.

The resulting histogram is prepared for aggregation according to the requirements
of the chosen [=aggregation service=] and returned to the site.
This minimally involves encryption of the histogram.

<p class=note>A site that invokes this API will always receive a valid conversion report.
As a result, sites learn nothing about what happened on other sites from this interaction.

The site can collect the encrypted histograms it receives from calls to this API
and submit them to the aggregation service.

The aggregation service:

1.  confirms that it has not
    previously computed an aggregate
    from the provided inputs
    and that there are enough conversion reports,

2.  adds the histograms including sufficient [[#dp noise]]
    to produce a differentially-private aggregate histogram, and

3.  returns the aggregate to the site.



# API Details # {#api}

Open questions:
*   Filter/query language
*   Reports are sent to aggregation system directly, or via conversion site? Or
    option of either? => via conversion site
*   Epochs

TODO

## ListAggregationSystems API ## {#list-aggregation-systems-api}

navigator.privateAttribution.listAggregationSystems()

<xmp class=idl>
dictionary PrivateAttributionAggregationSystem {
  required DOMString id;
};
</xmp>

## SaveImpression API ## {#save-impression-api}

<pre>
navigator.privateAttribution.saveImpression({
  type: "view",                  // either "view" or "click"
  index: 3,                      // the histogram index for counting this impression
  ad: "sample-campaign-eijb",    // a unique identifier for the ad placement
  target: "advertiser.example",  // the advertiser site where a conversion will occur
});
</pre>

Add:
* attribution system
* TTL
* DP parameters

Questions:
*   Revisit the set of impression types. Can we get rid of it, and put it in the
    ad ID? Or generalize to "attribution constraint"?

<xmp class=idl>
dictionary PrivateAttributionImpressionOptions {
  required unsigned long index;
  required DOMString ad;
  required DOMString target;
};

[SecureContext, Exposed=Window]
interface PrivateAttribution {
  [Throws] undefined saveImpression(DOMString aggregationSystemId, PrivateAttributionImpressionOptions options);
};
</xmp>

Implicit saveImpression API inputs:
* Timestamp (epoch?)
* Source site


### Operation ### {#save-impression-api-operation}

1. Validate inputs
2. If the private attribution API is enabled, save the impression to the store.


## MeasureConversion API ## {#measure-conversion-api}

TODO:
* Add conversion value
* Change filter data


navigator.privateAttribution.measureConversion({
  // the number of buckets in the histogram
  size: 20,
  
  // the value to assign to the histogram index of the impression
  value: 3,


  // only consider impressions within the last N days
  lookbackDays: 30,
  // a list of possible ad identifiers that can be attributed
  ads: ["sample-campaign-eijb"],
  // a list of sites where impressions might have been registered
  source: ["publisher.example"]
});


<xmp class=idl>
dictionary PrivateAttributionConversionOptions {
  required unsigned long histogramSize;
  unsigned long value = 1;

  unsigned long lookbackDays = Infinity;
  PrivateAttributionImpressionType impression;
  sequence<DOMString> ads = [];
  sequence<DOMString> sources = [];
};

[SecureContext, Exposed=Window]
partial interface PrivateAttribution {
  [Throws] Promise<Uint8Array> measureConversion(PrivateAttributionConversionOptions options);
};
</xmp>


Implicit MeasureConversion API inputs:
* Timestamp (epoch?)
* Target site

### Operation ### {#measure-conversion-api-operation}

1. Validate inputs
2. Set reportedConversionValue = 0.
3. If the private attribution API is enabled, search for a matching impression.
4. If a matching impression was found:
    1. Set histogramIndex to the value from the matching impression
    2. set reportedConversionValue to the smaller of the following:
        1. The conversion value passed to the MeasureConversion API.
        2. The limit on conversion value determined by the remaining privacy budget.
5. Update the privacy budget store to reflect the reported conversion value.
6. Construct a report from reportedConversionValue, histogramIndex, and histogramSize.
7. Encrypt the report.
8. Return the encrypted report.


## Impression database ## {#impression-database}



## User control and visibility ## {#user-control}

* Users should be able to opt out. Opt out should be undetectable.
* User ability to view the impression store.

# Implementation Considerations # {#implementation-considerations}

* Management and distribution of values for the following:
    * Histogram size
    * Target site for impressions
    * Source site for conversions
    * Ad IDs

# Aggregation # {#aggregation}

An <dfn>aggregation service</dfn> takes multiple pieces of attribution information
and produces an aggregate metric.

Each browser will have different requirements for aggregation.


## Multi-Party Computation Aggregation ## {#mpc}

TODO


## Trusted Execution Environments ## {#tee}

TODO


## Conversion Report Encryption ## {#encryption}

TODO


# Differential Privacy # {#dp}

This design uses the concept of differential privacy as the basis of its privacy design.


## Privacy Budgets ## {#dp-budget}

Browsers maintain a <dfn>privacy budget</dfn>,
which is a means of limiting the amount of privacy loss.

TODO


# Security # {#security}

TODO

* Browser security
    * Clearing of impression store
    * Partitioning of impression store
    * Interaction with private browsing modes
    * Interaction with telemetry opt-outs
    * Timing attacks on APIs

* Aggregation system security

* Fraud and abuse


# Acknowledgements # {#ack}

This specification is the result of a lot of work from many people.
The broad shape of this level of the API is based on an idea from Luke Winstrom.
The privacy architecture is courtesy of the authors of [[PPA-DP]].


<pre class=biblio>
{
  "ppa-dp": {
    "authors": [
      "Pierre Tholoniat",
      "Kelly Kostopoulou",
      "Peter McNeely",
      "Prabhpreet Singh Sodhi",
      "Anirudh Varanasi",
      "Benjamin Case",
      "Asaf Cidon",
      "Roxana Geambasu",
      "Mathias Lécuyer"
    ],
    "href": "https://arxiv.org/abs/2405.16719",
    "title": "Cookie Monster: Efficient On-device Budgeting for Differentially-Private Ad-Measurement Systems",
    "publisher": "SOSP'24"
  }
}
</pre>
